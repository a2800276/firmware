#ifndef _CC3000_
#define _CC3000_

#include "../core/types.h"
#include "../utils/simpleio.h"

/** unsolicited events generated by CC3000 */
typedef enum {
    CC3000_HCI_EVNT_WLAN_ASYNC_SIMPLE_CONFIG_DONE, // – Notification that the first-time configuration process is complete
    CC3000_HCI_EVNT_WLAN_KEEPALIVE, // – Periodic keep-alive event between the CC3000 and the host microcontroller unit (MCU)
    CC3000_HCI_EVNT_WLAN_UNSOL_CONNECT, // – WLAN-connected event
    CC3000_HCI_EVNT_WLAN_UNSOL_DISCONNECT, // – Notification that CC3000 device is disconnected from the access point (AP)
    CC3000_HCI_EVNT_WLAN_UNSOL_DHCP, // – Notification of a Dynamic Host Configuration Protocol (DHCP) state change
    CC3000_HCI_EVNT_WLAN_UNSOL_INIT, // – Notification that the CC3000 device finished the initialization process
    CC3000_HCI_EVNT_WLAN_ASYNC_PING_REPORT, // – Notification of ping results
    CC3000_HCI_EVNT_ASYNC_ARP_WAITING, // – Event indicating that ARP request was sent out by the device. Wait until the HCI_EVNT_ASYNC_ARP_DONE event is received.
    CC3000_HCI_EVNT_ASYNC_ARP_DONE, // – ARP response is received by the device. Stop waiting and send the data.
} CC3000_HCI_EVNT;

typedef enum {
	CC3000_SEC_TYPE_NONE,
	CC3000_SEC_TYPE_WEP,
    CC3000_SEC_TYPE_WPA,
    CC3000_SEC_TYPE_WPA2
} CC3000_SEC_TYPE;

typedef enum {
	CC3000_SOCKET_EVENT_DATA_AVAILABLE,
	CC3000_SOCKET_EVENT_CLOSED
} CC3000_SOCKET_EVENT;

// startup / shutdown of peripheral
void cc3000_init();
void cc3000_shutdown();

// connecting to an AP
void cc3000_connect(uint8_t* ssid, uint8_t ssid_len, CC3000_SEC_TYPE sec_type, uint8_t* key, uint8_t key_len);
void cc3000_disconnect();
bool cc3000_is_connected();

// running TCP sockets
typedef void (*CC3000_SOCKET_EVENT_CB)(CC3000_SOCKET_EVENT evt);
void cc3000_socket_open(const uint8_t* host, uint16_t port, CC3000_SOCKET_EVENT_CB);
void cc3000_socket_close();
uint16_t cc3000_socket_write(const uint8_t* data, uint16_t len);
uint16_t cc3000_socket_read(uint8_t* data, uint16_t len);


#endif
