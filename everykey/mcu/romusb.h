#ifndef _ROMUSB_H_#define _ROMUSB_H_#include "romerr.h"#include "../core/types.h"// -------------------// --- USB ROM API ---// -------------------#ifdef __cplusplusextern "C" {#endif//To define: USB_SETUP_PACKET, CDC_LINE_CODINGtypedef void* USB_HANDLE;//Preliminary USB typedefs, byte data of respective type. should be defined more detailed and go to a USB spec headertypedef uint8_t USB_ENDPOINT_DESCRIPTOR;typedef struct {  uint8_t bmRequestType;  uint8_t bRequest;  uint16_t wValue;  uint16_t wIndex;  uint16_t wLength;} __attribute__((packed)) USB_SETUP_PACKET;typedef struct {  //usbcdc11.pdf, table 50  uint32_t dwDTERate;                            // Data terminal rate, in bits per second.  uint8_t  bCharFormat;                          // Stop bits: 0 - 1 Stop bit, 1 - 1.5 Stop bits, 2 - 2 Stop bits  uint8_t  bParityType;                          // Parity: 0 - None, 1 - Odd, 2 - Even, 3 - Mark, 4 - Space  uint8_t  bDataBits;                            // ï¿¼Data bits (5, 6, 7, 8 or 16)} __attribute__((packed)) CDC_LINE_CODING;typedef void (*USB_CB)(USB_HANDLE usbHandle);typedef void (*USB_PARAM_CB)(USB_HANDLE usbHandle, uint32_t param);typedef ROM_ERR (*USB_EP_HANDLER)(USB_HANDLE usbHandle, void* data, uint32_t event);typedef struct {  uint8_t* device_desc;           //Device descriptor  uint8_t* string_descs;          //Array of string descriptors  uint8_t* full_speed_desc;       //full speed descriptor  uint8_t* high_speed_desc;       //high speed descriptor - set to full speed desc for fs device  uint8_t* device_qualifier;      //high speed qualifier - set to NULL for fs device} USB_CORE_DESCS;typedef struct {  uint32_t usb_reg_base;          //USB device base register address  uint32_t mem_base;              //base address of RAM buffer for stack - 2048 byte boundary, DMA-accessible  uint8_t max_num_ep;             //max number of endpoints  uint8_t pad0[3];                //padding  USB_CB USB_Reset_Event;         //Callback for reset  USB_CB USB_Suspend_Event;       //Callback for suspend  USB_CB USB_Resume_Event;        //Callback for resume  USB_CB reserved_sbz;            //Reserved callback - set to NULL  USB_CB USB_SOF_Event;           //Callback for start of frame  USB_PARAM_CB USB_WakeUpCfg;     //Callback for remote wakeup  USB_PARAM_CB USB_Power_Event;   //Callback for power  USB_PARAM_CB USB_Error_Event;   //Error callback  USB_CB USB_Configure_Event;     //Configure callback  USB_CB USB_Interface_Event;     //Interface event callback  USB_CB USB_Feature_Event;       //Feature event callback  void* virt_to_phys;             //Reserved callback - set to NULL  void* cache_flush;              //Reserved callback - set to NULL} USB_API_INIT_PARAM;// HWtypedef uint32_t (*USB_HW_API_GETMEMSIZE)(USB_API_INIT_PARAM* param);typedef ROM_ERR (*USB_HW_API_INIT)(USB_HANDLE* usbHandle, USB_CORE_DESCS descs, USB_API_INIT_PARAM param);typedef void (*USB_HW_API_CONNECT)(USB_HANDLE usbHandle, uint32_t con);typedef void (*USB_HW_API_ISR)(USB_HANDLE usbHandle);typedef void (*USB_HW_API_RESET)(USB_HANDLE usbHandle);typedef void (*USB_HW_API_FORCEFULLSPEED)(USB_HANDLE usbHandle, uint32_t cfg);typedef void (*USB_HW_API_WAKEUPCFG)(USB_HANDLE usbHandle, uint32_t cfg);typedef void (*USB_HW_API_SETADDRESS)(USB_HANDLE usbHandle, uint32_t addr);typedef void (*USB_HW_API_CONFIGURE)(USB_HANDLE usbHandle, uint32_t cfg);typedef void (*USB_HW_API_CONFIGEP)(USB_HANDLE usbHandle, USB_ENDPOINT_DESCRIPTOR* desc);typedef void (*USB_HW_API_DIRCTRLEP)(USB_HANDLE usbHandle, uint32_t dir);typedef void (*USB_HW_API_ENABLEEP)(USB_HANDLE usbHandle, uint32_t epNum);typedef void (*USB_HW_API_DISABLEEP)(USB_HANDLE usbHandle, uint32_t epNum);typedef void (*USB_HW_API_RESETEP)(USB_HANDLE usbHandle, uint32_t epNum);typedef void (*USB_HW_API_SETSTALLEP)(USB_HANDLE usbHandle, uint32_t epNum);typedef void (*USB_HW_API_CLRSTALLEP)(USB_HANDLE usbHandle, uint32_t epNum);typedef void (*USB_HW_API_SETTESTMODE)(USB_HANDLE usbHandle, uint8_t mode);typedef void (*USB_HW_API_READEP)(USB_HANDLE usbHandle, uint32_t epNum, uint8_t* data);typedef void (*USB_HW_API_READREQEP)(USB_HANDLE usbHandle, uint32_t epNum, uint8_t* data, uint32_t len);typedef void (*USB_HW_API_READSETUPPKT)(USB_HANDLE usbHandle, uint32_t epNum, uint32_t* data);typedef void (*USB_HW_API_WRITEEP)(USB_HANDLE usbHandle, uint32_t epNum, uint8_t* data, uint32_t len);typedef void (*USB_HW_API_WAKEUP)(USB_HANDLE usbHandle);typedef void (*USB_HW_API_ENABLEEVENT)(USB_HANDLE usbHandle, uint32_t epNum, uint32_t event, uint32_t enable);typedef struct {  USB_HW_API_GETMEMSIZE GetMemSize;  USB_HW_API_INIT Init;  USB_HW_API_CONNECT Connect;  USB_HW_API_ISR ISR;  USB_HW_API_RESET Reset;  USB_HW_API_FORCEFULLSPEED ForceFullSpeed;  USB_HW_API_WAKEUPCFG WakeUpCfg;  USB_HW_API_SETADDRESS SetAddress;  USB_HW_API_CONFIGURE Configure;  USB_HW_API_CONFIGEP ConfigEP;  USB_HW_API_DIRCTRLEP DirCtrlEP;  USB_HW_API_ENABLEEP EnableEP;  USB_HW_API_DISABLEEP DisableEP;  USB_HW_API_RESETEP ResetEP;  USB_HW_API_SETSTALLEP SetStallEP;  USB_HW_API_CLRSTALLEP ClrStallEP;  USB_HW_API_SETTESTMODE SetTestMode;  USB_HW_API_READEP ReadEP;  USB_HW_API_READREQEP ReadReqEP;  USB_HW_API_READSETUPPKT ReadSetupPkt;  USB_HW_API_WRITEEP WriteEP;  USB_HW_API_WAKEUP WakeUp;  USB_HW_API_ENABLEEVENT EnableEvent;} USB_HW_API;// COREtypedef ROM_ERR (*USB_CORE_API_REGISTERCLASSHANDLER)(USB_HANDLE usbHandle, USB_EP_HANDLER handler, void* data);typedef ROM_ERR (*USB_CORE_API_REGISTEREPHANDLER)(USB_HANDLE usbHandle, uint32_t ep_index, USB_EP_HANDLER handler, void* data);typedef void (*USB_CORE_API_SETUPSTAGE)(USB_HANDLE usbHandle);typedef void (*USB_CORE_API_DATAINSTAGE)(USB_HANDLE usbHandle);typedef void (*USB_CORE_API_DATAOUTSTAGE)(USB_HANDLE usbHandle);typedef void (*USB_CORE_API_STATUSINSTAGE)(USB_HANDLE usbHandle);typedef void (*USB_CORE_API_STATUSOUTSTAGE)(USB_HANDLE usbHandle);typedef void (*USB_CORE_API_STALLEP0)(USB_HANDLE usbHandle);typedef struct {  USB_CORE_API_REGISTERCLASSHANDLER RegisterClassHandler;  USB_CORE_API_REGISTEREPHANDLER RegisterEPHander;  USB_CORE_API_SETUPSTAGE SetupStage;  USB_CORE_API_DATAINSTAGE DataInStage;  USB_CORE_API_DATAOUTSTAGE DataOutStage;  USB_CORE_API_STATUSINSTAGE StatusInStage;  USB_CORE_API_STATUSOUTSTAGE StatusOutStage;  USB_CORE_API_STALLEP0 StallEp0;} USB_CORE_API;// DFUtypedef uint8_t(*USB_DFU_API_DFU_WRITE)(uint32_t block_num, uint8_t** src, uint32_t length, uint8_t* pollTimeout);typedef uint32_t(*USB_DFU_API_DFU_READ)(uint32_t block_num, uint8_t **dst, uint32_t length);typedef void(*USB_DFU_API_DFU_DONE)(void);typedef void(*USB_DFU_API_DFU_DETACH)(USB_HANDLE usbHandle);typedef ROM_ERR(*USB_DFU_API_DFU_EP0_HDLR)(USB_HANDLE usbHandle, void* data, uint32_t event);typedef struct {  uint32_t mem_base;  uint32_t mem_size;  uint16_t wTransferSize;  //transfer block size in bytes  uint16_t pad;  uint8_t* intf_desc;      //pointer to interface descriptor  USB_DFU_API_DFU_WRITE DFU_Write;  USB_DFU_API_DFU_READ DFU_Read;  USB_DFU_API_DFU_DONE DFU_Done;  USB_DFU_API_DFU_DETACH DFU_Detach;  USB_DFU_API_DFU_EP0_HDLR DFU_Ep0_Hdlr;  //TODO ********} USB_DFU_INIT_PARAM;typedef uint32_t (*USB_DFU_API_GETMEMSIZE)(USB_DFU_INIT_PARAM* param);typedef ROM_ERR (*USB_DFU_API_INIT)(USB_HANDLE usbHandle, USB_DFU_INIT_PARAM* param, uint32_t initState);typedef struct {  USB_DFU_API_GETMEMSIZE GetMemSize;  USB_DFU_API_INIT Init;} USB_DFU_API;// HIDtypedef ROM_ERR(*USBD_HID_API_HID_GETREPORT)(USB_HANDLE hidHandle, USB_SETUP_PACKET* setupPacket, uint8_t** buffer, uint16_t* length);;typedef ROM_ERR(*USBD_HID_API_HID_SETREPORT)(USB_HANDLE hidHandle, USB_SETUP_PACKET* setupPacket, uint8_t** buffer, uint16_t length);typedef ROM_ERR(*USBD_HID_API_HID_GETPHYSDESC)(USB_HANDLE hidHandle, USB_SETUP_PACKET* setupPacket, uint8_t** buffer, uint16_t* length);typedef ROM_ERR(*USBD_HID_API_HID_SETIDLE)(USB_HANDLE hidHandle, USB_SETUP_PACKET* setupPacket, uint8_t idleTime);typedef ROM_ERR(*USBD_HID_API_HID_SETPROTOCOL)(USB_HANDLE hidHandle, USB_SETUP_PACKET* setupPacket, uint8_t protocol);typedef ROM_ERR(*USBD_HID_API_HID_EPIN_HDLR)(USB_HANDLE usbHandle, void* data, uint32_t event);typedef ROM_ERR(*USBD_HID_API_HID_EPOUT_HDLR)(USB_HANDLE usbHandle, void* data, uint32_t event);typedef ROM_ERR(*USBD_HID_API_HID_GETREPORTDESC)(USB_HANDLE hidHandle, USB_SETUP_PACKET* setupPacket, uint8_t** buffer, uint16_t* length);typedef ROM_ERR(*USBD_HID_API_HID_EP0_HDLR)(USB_HANDLE usbHandle, void* data, uint32_t event);typedef struct {  uint16_t len;      //Size of the report descriptor in bytes.  uint8_t idle_time; //This value is used by stack to respond to Set_Idle & GET_Idle requests for the specified report ID. The value of this field specified the rate at which duplicate reports are generated for the specified Report ID. For example, a device with two input reports could specify an idle rate of 20 milliseconds for report ID 1 and 500 milliseconds for report ID 2.  uint8_t pad;       //Padding space.  uint8_t* desc;     //Report descriptor.} USB_HID_REPORT;typedef struct {  uint32_t mem_base;  uint32_t mem_size;  uint8_t max_reports;  uint8_t padding[3];  uint8_t* intf_desc;  USB_HID_REPORT* report_data;  //Array of HID_REPORTs (should be global)  USBD_HID_API_HID_GETREPORT GetReport;  USBD_HID_API_HID_SETREPORT SetReport;  USBD_HID_API_HID_GETPHYSDESC GetPhysDesc;  USBD_HID_API_HID_SETIDLE SetIdle;  USBD_HID_API_HID_SETPROTOCOL SetProtocol;  USBD_HID_API_HID_EPIN_HDLR EpIn_Hdlr;  USBD_HID_API_HID_EPOUT_HDLR EpOut_Hdlr;  USBD_HID_API_HID_GETREPORTDESC GetReportDesc;  USBD_HID_API_HID_EP0_HDLR Ep0_Hdlr;} USB_HID_INIT_PARAM;typedef uint32_t(*USB_HID_API_GETMEMSIZE)(USB_HID_INIT_PARAM* param);typedef ROM_ERR(*USB_HID_API_INIT)(USB_HANDLE usbHandle, USB_HID_INIT_PARAM* param);typedef struct {  USB_HID_API_GETMEMSIZE GetMemSize;  USB_HID_API_INIT Init;} USB_HID_API;// CDCtypedef ROM_ERR (*USB_CDC_API_GETREQUEST)(USB_HANDLE cdcHandle, USB_SETUP_PACKET* setup, uint8_t** data, uint16_t* length);typedef ROM_ERR (*USB_CDC_API_SETREQUEST)(USB_HANDLE cdcHandle, USB_SETUP_PACKET* setup, uint8_t** data, uint16_t length);typedef ROM_ERR (*USB_CDC_API_CDC_BULKIN_HDLR)(USB_HANDLE usbHandle, void* data, uint32_t event);typedef ROM_ERR (*USB_CDC_API_CDC_BULKOUT_HDLR)(USB_HANDLE usbHandle, void* data, uint32_t event);typedef ROM_ERR (*USB_CDC_API_SENDENCPSCMD)(USB_HANDLE cdcHandle, uint8_t* buffer, uint16_t len);typedef ROM_ERR (*USB_CDC_API_GETENCPSRESP)(USB_HANDLE cdcHandle, uint8_t** buffer, uint16_t* len);typedef ROM_ERR (*USB_CDC_API_SETCOMMFEATURE)(USB_HANDLE cdcHandle, uint16_t feature, uint8_t* buffer, uint16_t len);typedef ROM_ERR (*USB_CDC_API_GETCOMMFEATURE)(USB_HANDLE cdcHandle, uint16_t feature, uint8_t** buffer, uint16_t* len);typedef ROM_ERR (*USB_CDC_API_CLRCOMMFEATURE)(USB_HANDLE cdcHandle, uint16_t feature);typedef ROM_ERR (*USB_CDC_API_SETCTRLLINESTATE)(USB_HANDLE cdcHandle, uint16_t state);typedef ROM_ERR (*USB_CDC_API_SENDBREAK)(USB_HANDLE cdcHandle, uint16_t mstime);typedef ROM_ERR (*USB_CDC_API_SETLINECODE)(USB_HANDLE cdcHandle, CDC_LINE_CODING* line_coding);typedef ROM_ERR (*USB_CDC_API_CDC_INTERRUPTEP_HDLR)(USB_HANDLE usbHandle, void* data, uint32_t event);typedef ROM_ERR (*USB_CDC_API_CDC_EP0_HDLR)(USB_HANDLE usbHandle, void* data, uint32_t event);typedef struct {  uint32_t mem_base;                      //stack mem base  uint32_t mem_size;                      //stack mem size  uint8_t* cif_intf_desc;                 //control interface desc  uint8_t* dif_intf_desc;                 //data interface desc  USB_CDC_API_GETREQUEST CIC_GetRequest;  //can be NULL for ACM  USB_CDC_API_SETREQUEST CIC_SetRequest;  //can be NULL for ACM  USB_CDC_API_CDC_BULKIN_HDLR CDC_BulkIN_Hdlr;  USB_CDC_API_CDC_BULKOUT_HDLR CDC_BulkOUT_Hdlr;  USB_CDC_API_SENDENCPSCMD SendEncpsCmd;  USB_CDC_API_GETENCPSRESP GetEncpsResp;  USB_CDC_API_SETCOMMFEATURE SetCommFeature;  USB_CDC_API_GETCOMMFEATURE GetCommFeature;  USB_CDC_API_CLRCOMMFEATURE ClrCommFeature;  USB_CDC_API_SETCTRLLINESTATE SetCtrlLineState;  USB_CDC_API_SENDBREAK SendBreak;  USB_CDC_API_SETLINECODE SetLineCode;  USB_CDC_API_CDC_INTERRUPTEP_HDLR CDC_InterruptEP_Hdlr;  USB_CDC_API_CDC_EP0_HDLR CDC_Ep0_Hdlr;} USB_CDC_INIT_PARAM;typedef uint32_t (*USB_CDC_API_GETMEMSIZE)(USB_CDC_INIT_PARAM* param);typedef ROM_ERR (*USB_CDC_API_INIT)(USB_HANDLE usbHandle, USB_CDC_INIT_PARAM param, USB_HANDLE* cdcHandle);typedef ROM_ERR (*USB_CDC_API_SENDNOTIFICATION)(USB_HANDLE cdcHandle, uint8_t notification, uint16_t data);typedef struct {  USB_CDC_API_GETMEMSIZE GetMemSize;  USB_CDC_API_INIT Init;  USB_CDC_API_SENDNOTIFICATION SendNotification;} USB_CDC_API;// MSCtypedef void(*USB_MSC_API_WRITE)(uint32_t offset, uint8_t** src, uint32_t length);typedef void(*USB_MSC_API_READ)(uint32_t offset, uint8_t** dst, uint32_t length);typedef ROM_ERR(*USB_MSC_API_VERIFY)(uint32_t offset, uint8_t buf[], uint32_t length);typedef void(*USB_MSC_API_GETWRITEBUF)(uint32_t offset, uint8_t** buff_adr, uint32_t length);typedef ROM_ERR(*USB_MSC_API_EP0_HDLR)(USB_HANDLE usbHandle, void* data, uint32_t event);typedef struct {  uint32_t mem_base;  uint32_t mem_size;  uint8_t* InquiryStr;  uint32_t BlockCount;  uint32_t BlockSize;  uint8_t* intf_desc;  USB_MSC_API_WRITE MSC_Write;  USB_MSC_API_READ MSC_Read;  USB_MSC_API_VERIFY MSC_Verify;  USB_MSC_API_GETWRITEBUF MSC_GetWriteBuf; //optional, optimize write buffer transfer  USB_MSC_API_EP0_HDLR MSC_Ep0_Hdlr;} USB_MSC_INIT_PARAM;typedef uint32_t(*USB_MSC_API_GETMEMSIZE)(USB_MSC_INIT_PARAM* param);typedef ROM_ERR(*USB_MSC_API_INIT)(USB_HANDLE usbHandle, USB_MSC_INIT_PARAM* param);typedef struct {  USB_MSC_API_GETMEMSIZE GetMemSize;  USB_MSC_API_INIT Init;} USB_MSC_API;// USB overall APItypedef struct {  const USB_HW_API* hw;  const USB_CORE_API* core;  const USB_MSC_API* msc;  const USB_DFU_API* dfu;  const USB_HID_API* hid;  const USB_CDC_API* cdc;  const uint32_t* reserved6;  const uint32_t version;} USB_API;#define USB_ROM_API (*((USB_API**)0x1040011C))#ifdef __cplusplus}#endif#endif /* _ROMUSB_H_ */